{% extends model('component') %}

{% define config = {
    name: 'product-item',
    tag: 'article'
} %}

{% define data = {
    list: {},
    listItem: required,
    attributes: [],
    options: [],
    canEdit: false,
    quantity: null,
    imageModifiers: [],

    isShoppingList: false
} %}

{% block body %}
    {% set amountSalesUnit = data.listItem.amountSalesUnit is defined ? data.listItem.amountSalesUnit : null %}
    {% set quantitySalesUnit = data.listItem.quantitySalesUnit is defined ? data.listItem.quantitySalesUnit : null %}
    {% set price = data.listItem.unitPrice is defined ? data.listItem.unitPrice : data.listItem.price %}
    <div class="grid grid--stretch grid--gap">
        <div class="{{ component.renderClass(config.name ~ '__col', modifiers) }} {{ config.name }}__col--image col col--sm-12 col--lg-3">
            {% block image %}
                <a href="{{ data.listItem.url }}">
                    {% include molecule('product-item-image') with {
                        modifiers: data.imageModifiers,
                        data: {
                            name: data.listItem.name | default(''),
                            image: data.listItem.images is empty ? null : (data.listItem.images | first)
                        }
                    } only %}
                </a>
            {% endblock %}
        </div>

        <div class="{{ component.renderClass(config.name ~ '__col', modifiers) }} {{ config.name }}__col--content col col--sm-12 col--lg-6">

            {% block title %}
                <h6 class="{{ component.renderClass(config.name ~ '__title', modifiers) }}">
                    <a href="{{ data.listItem.url }}" class="{{ component.renderClass(config.name ~ '__title', modifiers) }}">{{ data.listItem.name }}</a>
                </h6>
            {% endblock %}

            {% block info %}
                <small class="text-secondary">{{ 'cart.item.sku' | trans }} {{ data.listItem.sku }}</small>
            {% endblock %}

            {% if data.quantity is not empty %}
                <div class="grid grid--middle grid--gap {{ config.name }}__quantity">
                    <div class="col">
                        <span class="{{ config.name }}__quantity-title">{{ 'cart.item_quantity' | trans }}:</span> {{ data.quantity }}
                    </div>
                    {% block subQuantity %}{% endblock %}
                </div>
            {% endif %}

            {% if quantitySalesUnit is not empty and amountSalesUnit is not empty %}
                {% include molecule('packaging-unit-cart', 'ProductPackagingUnitWidget') with {
                    data: {
                        amount: data.listItem.amount,
                        quantity: data.listItem.quantity,
                        quantitySalesUnit: data.listItem.quantitySalesUnit,
                        quantityConversion: data.listItem.quantitySalesUnit.conversion,
                        quantityProductMeasurementUnit: data.listItem.quantitySalesUnit.productMeasurementUnit,
                        amountSalesUnit: data.listItem.amountSalesUnit,
                        amountConversion: data.listItem.amountSalesUnit.conversion,
                        amountProductMeasurementUnit: data.listItem.amountSalesUnit.productMeasurementUnit,
                        amountValue: data.listItem.amountSalesUnit.value
                    }
                } only %}
            {% endif %}

            {% if amountSalesUnit is empty and quantitySalesUnit is not empty and data.quantity is empty %}
                <div class="{{ config.name }}__quantity grid grid--middle grid--gap">
                    <div class="col col--sm-12 col--md-2">{{ 'packaging_units.cart.quantity' | trans }}: </div>
                    <div class="col">
                        {% set cartProductMeasurementUnitQuantitySelectorWidget = findWidget('CartProductMeasurementUnitQuantitySelectorWidget', [data.listItem]) %}

                        {% if cartProductMeasurementUnitQuantitySelectorWidget and data.canEdit %}
                            {% widget cartProductMeasurementUnitQuantitySelectorWidget only %}{% endwidget %}
                        {% else %}
                            {% include molecule('product-item-quantity') with {
                                data: {
                                    productItem: data.listItem,
                                    isDisabled: not data.canEdit
                                }
                            } only %}
                        {% endif %}
                    </div>
                </div>
            {% endif %}

            {% block itemAttributes %}
                {% if data.attributes is not empty %}
                    {% include molecule('product-item-variant-selector') with {
                        data: {
                            productItem: data.listItem,
                            productItemAttributes: data.attributes
                        }
                    } only %}
                {% endif %}
            {% endblock %}

            {% block bundle %}
                {% widget 'ProductBundleItemsMultiCartItemsListWidget' args [data.listItem, data.list] only %}{% endwidget %}
            {% endblock %}

            {% block note %}
                {% if data.canEdit %}
                    {% widget 'CartItemNoteFormWidget' args [data.listItem, data.list] only %}{% endwidget %}
                {% endif %}
            {% endblock %}

            {% if data.listItem.productOptions is defined and data.listItem.productOptions | length > 0 %}
                {% include molecule('product-item-options') with {
                    data: {
                        productItem: data.listItem
                    }
                } only %}
            {% endif %}

            {% if data.options | length > 0 %}
                {% include molecule('product-item-options') with {
                    data: {
                        options: data.options
                    }
                } only %}
            {% endif %}

        </div>

        <div class="{{ component.renderClass(config.name ~ '__col', modifiers) }} {{ config.name }}__col--total col col--sm-12 col--lg-3">
            <div class="{{ config.name }}__inner--total grid grid--column grid--justify-column grid--bottom">
                <div class="col">
                    {% block price %}
                        {% include molecule('price') with {
                            modifiers: ['cart'],
                            data: {
                                amount: price | money,
                                originalAmount: data.listItem.prices.ORIGINAL is not defined or data.listItem.prices.ORIGINAL is empty ? null : (data.listItem.prices.ORIGINAL | money)
                            },
                        } only %}
                    {% endblock %}

                    {% block quantity %}
                        {% if amountSalesUnit is empty and quantitySalesUnit is empty and data.quantity is empty %}
                            {% set cartProductMeasurementUnitQuantitySelectorWidget = findWidget('CartProductMeasurementUnitQuantitySelectorWidget', [data.listItem]) %}

                            {% if cartProductMeasurementUnitQuantitySelectorWidget and data.canEdit %}
                                {% widget cartProductMeasurementUnitQuantitySelectorWidget only %}{% endwidget %}
                            {% else %}
                                {% include molecule('product-item-quantity') with {
                                    data: {
                                        productItem: data.listItem,
                                        isDisabled: not data.canEdit
                                    }
                                } only %}
                            {% endif %}
                        {% endif %}
                    {% endblock %}
                </div>

                {% block deleteButton %}
                    {% if data.canEdit %}
                        <div class="col">
                            <a class="link link--icon {{ config.jsName }}-remove-button-{{ data.listItem.sku }}-group-key-{{ data.listItem.groupKey | replace('.', '') }}" href="{{ path('cart/remove', {'sku': data.listItem.sku, 'groupKey': data.listItem.groupKey }) }}">
                                {% include atom('icon') with {
                                    modifiers: ['link'],
                                    data: {
                                        name: 'delete'
                                    }
                                } only %}
                                {{ 'cart.delete.item' | trans }}
                            </a>
                        </div>

                        {% include molecule('action-single-click-enforcer') with {
                            attributes: {
                                'target-selector': '.' ~ config.jsName ~ '-remove-button-' ~ data.listItem.sku ~ '-group-key-' ~ data.listItem.groupKey | replace('.', '')
                            }
                        } only %}
                    {% endif %}
                {% endblock %}
            </div>
        </div>
    </div>
{% endblock %}
