{% extends model('component') %}

{% define config = {
    name: 'product-configurator',
    tag: 'section'
} %}

{% define data = {
    product: required,
    maxQuantity: 10,
    isBundle: null,
    bundleItems: []
} %}

{% set options = [] %}
{% set brand = data.product.attributes.brand | default %}
{% set sku = data.product.sku %}
{% set availabilityWidget = '' %}
{% set isProductConcrete = data.product.idProductConcrete is not empty %}
{% set isDisabled = data.product.idProductConcrete is empty or data.product.price is empty %}
{% set isProductAvailable = true %}

{% for index in 1..data.maxQuantity %}
    {% set options = options | merge([{
        label: index,
        value: index
    }]) %}
{% endfor %}

{% set isAvailable = data.product.idProductConcrete and data.product.available %}
{% set isDisabled = not isAvailable or isDisabled %}

{% set productDiscontinuedNoteWidget = findWidget('ProductDiscontinuedNoteWidget', [sku]) %}
{% if productDiscontinuedNoteWidget.isDiscontinued is not null %}
    {% set isDisabled = productDiscontinuedNoteWidget.isDiscontinued or isDisabled %}
    {% set isProductAvailable = not productDiscontinuedNoteWidget.isDiscontinued %}
{% endif %}

{% block body %}

    <div class="{{ config.name }}__top-block">
        {% widget 'ProductDetailPageReviewWidget' args [data.product.idProductAbstract] use view('pdp-review-rating', 'ProductReviewWidget') only %}{% endwidget %}
        <div class="{{ config.name }}__brand-sku-wrapper">
            {% if brand is not empty %}
                <div class="{{ config.name }}__brand-name">{{brand}}</div>
            {% endif %}
            <div class="{{ config.name }}__sku">{{ 'product.attribute.sku' | trans }}: {{sku}}</div>
        </div>
    </div>

    {% if can('SeePricePermissionPlugin') %}
        {% widget 'ProductPriceVolumeWidget' args [data.product] only %}
        {% nowidget %}
            {% include molecule('money-price') with {
                modifiers: ['big'],
                data: {
                    amount: data.product.price,
                    originalAmount: data.product.prices.ORIGINAL is defined ? data.product.prices.ORIGINAL : null,
                },
            } only %}
        {% endwidget %}
    {% endif %}

    {% if data.isBundle != null %}
        <div class="{{ config.name }}__bundle product-options__item js-product-options-bundle">
            <div class="product-options__title js-product-options-bundle__title active" data-toggle-target=".js-product-options-bundle__target">{{ 'bundle.title' | trans }}</div>
            <div class="js-product-options-bundle__target">
                <ul class="product-bundle product-bundle--configurator">
                    {% for item in data.bundleItems %}
                        <li class="product-bundle__item product-bundle__item--configurator">
                            <div class="product-bundle__img-block product-bundle__img-block--configurator">
                                <img src="{{ item.image }}" class="product-bundle__img">
                            </div>
                            <div class="product-bundle__info product-bundle__info--configurator">
                                <h4 class="product-bundle__name">{{ item.name }}</h4>
                                <span class="product-bundle__quantity">x {{ item.quantity }}</span>
                            </div>
                        </li>
                    {% endfor %}
                </ul>
            </div>
        </div>
        {% include molecule('toggler-accordion') with {
            attributes: {
                'wrap-selector': '.js-product-options-bundle',
                'trigger-selector': '.js-product-options-bundle__title',
            },
        } only %}
    {% endif %}

    {% widget 'ExampleProductColorSelectorWidget' args [data.product.idProductAbstract] use view('pdp-color-selector', 'ExampleProductColorGroupWidget') only %}
    {% endwidget %}

    {% include molecule('variant-configurator', 'ProductDetailPage') with {
        data: {
            superAttributes: data.product.attributeMap.superAttributes,
            selectedAttributes: data.product.selectedAttributes,
            availableAttributes: data.product.availableAttributes
        }
    } only %}

    <form method="POST" class="{{ config.jsName }}__form" action="{{ path("cart/add", {"sku": sku}) }}">
        {% widget 'ProductOptionConfiguratorWidget' args [data.product] only %}{% endwidget %}
        {% if can('SeeAddToCartPermissionPlugin') %}
            <div class="{{ config.name }}__add-to-cart">
                {% widget 'ProductPackagingUnitWidget' args [data.product, isDisabled, options] only %}
                {% elsewidget 'ManageProductMeasurementUnitWidget' args [data.product, isDisabled, options] only %}
                {% nowidget %}
                    <div class="grid grid--stretch grid--justify">
                        {% include molecule('quantity-counter') with {
                            modifiers: ['right-space'],
                            data: {
                                isDisabled: isDisabled
                            }
                        } only %}

                        <div class="col">
                            <button type="submit" class="button button--alternative button--big button--expand button--no-horizontal-padding" {{ isDisabled ? 'disabled' : '' }} onclick="this.form.submit(); this.disabled='disabled'; return false;" {{qa('add-to-cart-button')}}>
                                {% include atom('icon') with {
                                    modifiers: ['cart-plus'],
                                    data: {
                                        name: 'cart-plus'
                                    }
                                } only %}
                                {{ 'page.detail.add-to-cart' | trans }}
                            </button>
                        </div>
                    </div>
                {% endwidget %}
            </div>

            {% widget 'AddToMultiCartWidget' args [isDisabled] only %}{% endwidget %}
        {% endif %}

        {% if not data.product.available %}
            <p class="text-alert">{{ "product.detail.out_of_stock" | trans }}</p>
        {% endif %}
    </form>

    {% if not isAvailable and isProductConcrete %}
        {% widget 'AvailabilityNotificationSubscriptionWidget' args [data.product] only %}{% endwidget %}
    {% endif %}

    {% if can('SeeShoppingListPermissionPlugin') %}
        {% widget 'AddToShoppingListWidget' args [sku, isDisabled] only %}{% endwidget %}
    {% endif %}

    {% widget 'ProductDiscontinuedNoteWidget' args [sku] only %}{% endwidget %}

{% endblock %}
